# global configuration, applies to all machines
variables:
  THREADS: 4 # reduce parallelism to avoid OOM in Legion build

# this configuration is intended for use at Ascent / https://code.ornl.gov
.ascent_variables: &ascent_variables
  SCHEDULER_PARAMETERS: "-P CHM137 -W 1:30 -nnodes 1 -alloc_flags gpumps"
  EXTERNAL_WORKDIR: /gpfs/wolf/chm137/proj-shared/ci/${CI_PIPELINE_ID}

  # for script test
  DATA_DIR: /gpfs/wolf/chm137/proj-shared/spinifel_data
  DATA_FILENAME: 2CEX-10k-2.h5
  OUT_DIR: /gpfs/wolf/chm137/proj-shared/ci/${CI_PIPELINE_ID}/spinifel_output
  CUPY_CACHE_DIR: /gpfs/wolf/chm137/proj-shared/ci/${CI_PIPELINE_ID}/cupy_cache

  # for pytest
  test_data_dir: /gpfs/wolf/chm137/proj-shared/spinifel_data/testdata

  IS_CRUSHER_JOB: 0

# this configuration is intended for use at Crusher / https://code.olcf.ornl.gov
.crusher_variables: &crusher_variables
  SCHEDULER_PARAMETERS: "-A CHM137_crusher -W 1:30 -N 1 -p batch"
  EXTERNAL_WORKDIR: /gpfs/alpine/chm137/proj-shared/ci/${CI_PIPELINE_ID}

  # for script test
  DATA_DIR: /gpfs/alpine/chm137/proj-shared/spinifel_data
  DATA_FILENAME: 2CEX-10k-2.h5
  OUT_DIR: /gpfs/alpine/chm137/proj-shared/ci/${CI_PIPELINE_ID}/spinifel_output
  CUPY_CACHE_DIR: /gpfs/alpine/chm137/proj-shared/ci/${CI_PIPELINE_ID}/cupy_cache

  # for pytest
  test_data_dir: /gpfs/alpine/chm137/proj-shared/spinifel_data/testdata

  IS_CRUSHER_JOB: 1


.test_rules: &test_rules
  rules:
    # run don't run Crusher jobs on Ascent and vice versa
    - if: '$IS_CRUSHER_JOB == "1" && $RUN_CRUSHER_JOBS != "1"'
      when: never
    - if: '$IS_CRUSHER_JOB != "1" && $RUN_CRUSHER_JOBS == "1"'
      when: never
    # if no other rule matches, run the job
    - when: always


stages:
  - build
  - unit_test
  - test
  - cleanup


######################################################################
### CI Configuration for Ascent
######################################################################

build_ascent:
  <<: [*test_rules]
  stage: build
  before_script:
    - mkdir -p $(dirname ${EXTERNAL_WORKDIR})
    - cp -r ${CI_PROJECT_DIR} ${EXTERNAL_WORKDIR}
    - cd ${EXTERNAL_WORKDIR}
    - git clean -fxd
    - git submodule update --init --recursive
  script:
    - ./setup/build_from_scratch.sh
  tags:
    - nobatch
  variables:
    <<: [*ascent_variables]

unit_test_ascent:
  <<: [*test_rules]
  stage: unit_test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
  script:
    - ./scripts/test.sh
  tags:
    - batch
  variables:
    <<: [*ascent_variables]

test_mpi_ascent:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - jsrun -n1 -a1 -g1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi
  tags:
    - batch
  variables:
    <<: [*ascent_variables]

test_legion_ascent:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
    - export PYTHONPATH=${PYTHONPATH}:${EXTERNAL_WORKDIR}
  script:
      - PYTHONPATH="$PYTHONPATH:$PWD/mpi4py_poison_wrapper" jsrun -n1 -a1 -g1 legion_python -ll:py 1 -ll:csize 8192 legion_main.py --default-settings=summit_ci.toml --mode=legion
  tags:
    - batch
  variables:
    <<: [*ascent_variables]

# TODO: suggest deprecating
#test_sequential_ascent:
#  <<: [*test_rules]
#  stage: test
#  before_script:
#    - cd ${EXTERNAL_WORKDIR}
#    - mkdir -p ${OUT_DIR}
#    - source ./setup/env.sh
#  script:
#    - jsrun -n1 -a1 -g1 python -m spinifel --default-settings=summit_ci.toml --mode=sequential
#  tags:
#    - batch
#  variables:
#    <<: [*ascent_variables]

# TODO: Skip for now -- runs out of memory -- not sure why though
# test_large_ascent:
#  <<: [*test_rules]
#   stage: test
#   before_script:
#     - cd ${EXTERNAL_WORKDIR}
#     - mkdir -p ${OUT_DIR}
#     - source ./setup/env.sh
#   script:
#     - jsrun -n1 -a1 -g1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.small_problem=false
#   tags:
#     - batch
#  variables:
#    <<: [*ascent_variables]

test_finufft_ascent:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - jsrun -n1 -a1 -g1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.use_cufinufft=false
  tags:
    - batch
  variables:
    <<: [*ascent_variables]

test_nocuda_ascent:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - jsrun -n1 -a1 -g1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.use_cufinufft=false runtime.use_cuda=false runtime.use_cupy=false
  tags:
    - batch
  variables:
    <<: [*ascent_variables]

cleanup_ascent:
  <<: [*test_rules]
  stage: cleanup
  before_script:
  script:
    - rm -rf ${EXTERNAL_WORKDIR}
  tags:
    - nobatch
  variables:
    <<: [*ascent_variables]


######################################################################
### CI Configuration for Crusher
######################################################################

build_crusher:
  <<: [*test_rules]
  stage: build
  before_script:
    - mkdir -p $(dirname ${EXTERNAL_WORKDIR})
    - cp -r ${CI_PROJECT_DIR} ${EXTERNAL_WORKDIR}
    - cd ${EXTERNAL_WORKDIR}
    - git clean -fxd
    - git submodule update --init --recursive
  script:
    - ./setup/build_from_scratch.sh
  tags:
    - shell
    - crusher
  variables:
    <<: [*crusher_variables]

unit_test_crusher:
  <<: [*test_rules]
  stage: unit_test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
  script:
    - ./scripts/test.sh
  tags:
    - slurm
    - crusher
  variables:
    <<: [*crusher_variables]

test_mpi_crusher:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - srun -n1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi
  tags:
    - slurm
    - crusher
  variables:
    <<: [*crusher_variables]

test_legion_crusher:
 <<: [*test_rules]
 stage: test
 before_script:
   - cd ${EXTERNAL_WORKDIR}
   - mkdir -p ${OUT_DIR}
   - source ./setup/env.sh
   - export PYTHONPATH=${PYTHONPATH}:${EXTERNAL_WORKDIR}
 script:
     - PYTHONPATH="$PYTHONPATH:$PWD/mpi4py_poison_wrapper" srun -n1 --cpu-bind none legion_python -ll:py 1 -ll:csize 8192 legion_main.py --default-settings=summit_ci.toml --mode=legion
 tags:
   - slurm
   - crusher
 variables:
   <<: [*crusher_variables]

# TODO: suggest deprecating
#test_sequential_crusher:
#  <<: [*test_rules]
#  stage: test
#  before_script:
#    - cd ${EXTERNAL_WORKDIR}
#    - mkdir -p ${OUT_DIR}
#    - source ./setup/env.sh
#  script:
#    - srun -n1 python -m spinifel --default-settings=summit_ci.toml --mode=sequential
#  tags:
#    - slurm
#    - crusher
#  variables:
#    <<: [*crusher_variables]

# TODO: Skip for now -- runs out of memory -- not sure why though
# test_large_crusher:
#  <<: [*test_rules]
#   stage: test
#   before_script:
#     - cd ${EXTERNAL_WORKDIR}
#     - mkdir -p ${OUT_DIR}
#     - source ./setup/env.sh
#   script:
#     - srun -n1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.small_problem=false
#   tags:
#     - slurm
#     - crusher
#  variables:
#    <<: [*crusher_variables]

test_finufft_crusher:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - srun -n1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.use_cufinufft=false
  tags:
    - slurm
    - crusher
  variables:
    <<: [*crusher_variables]

test_nocuda_crusher:
  <<: [*test_rules]
  stage: test
  before_script:
    - cd ${EXTERNAL_WORKDIR}
    - mkdir -p ${OUT_DIR}
    - source ./setup/env.sh
  script:
    - srun -n1 python -m spinifel --default-settings=summit_ci.toml --mode=mpi runtime.use_cufinufft=false runtime.use_cuda=false runtime.use_cupy=false
  tags:
    - slurm
    - crusher
  variables:
    <<: [*crusher_variables]

cleanup_crusher:
  <<: [*test_rules]
  stage: cleanup
  before_script:
  script:
    - rm -rf ${EXTERNAL_WORKDIR}
  tags:
    - shell
    - crusher
  variables:
    <<: [*crusher_variables]
